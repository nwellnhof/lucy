# ***********************************************
# 
# !!!! DO NOT EDIT !!!!
# 
# This file was auto-generated by Build.PL.
# 
# ***********************************************
# 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=encoding utf8

=head1 NAME

Lucy::Analysis::Inversion - A collection of Tokens.

=head1 SYNOPSIS

    my $result = Lucy::Analysis::Inversion->new;

    while (my $token = $inversion->next) {
        $result->append($token);
    }

=head1 DESCRIPTION

An Inversion is a collection of Token objects which you can add to, then
iterate over.

=head1 CONSTRUCTORS

=head2 new

    my $inversion = Lucy::Analysis::Inversion->new(
        $seed,  # optional
    );

=over

=item *

B<seed> - An initial Token to start things off, which may be
undef.

=back

=head1 METHODS

=head2 append

    $inversion->append($token);

Tack a token onto the end of the Inversion.

=over

=item *

B<token> - A Token.

=back

=head2 next

    $inversion->next();

Return the next token in the Inversion until out of tokens.

=head2 reset

    $inversion->reset();

Reset the Inversionâ€™s iterator, so that the next call to next()
returns the first Token in the inversion.

=head1 INHERITANCE

Lucy::Analysis::Inversion isa Clownfish::Obj.

=cut


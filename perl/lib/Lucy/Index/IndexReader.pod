# ***********************************************
# 
# !!!! DO NOT EDIT !!!!
# 
# This file was auto-generated by Build.PL.
# 
# ***********************************************
# 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=encoding utf8

=head1 NAME

Lucy::Index::IndexReader - Read from an inverted index.

=head1 SYNOPSIS

    my $reader = Lucy::Index::IndexReader->open(
        index => '/path/to/index',
    );
    my $seg_readers = $reader->seg_readers;
    for my $seg_reader (@$seg_readers) {
        my $seg_name = $seg_reader->get_segment->get_name;
        my $num_docs = $seg_reader->doc_max;
        print "Segment $seg_name ($num_docs documents):\n";
        my $doc_reader = $seg_reader->obtain("Lucy::Index::DocReader");
        for my $doc_id ( 1 .. $num_docs ) {
            my $doc = $doc_reader->fetch_doc($doc_id);
            print "  $doc_id: $doc->{title}\n";
        }
    }

=head1 DESCRIPTION

IndexReader is the interface through which
L<IndexSearcher|Lucy::Search::IndexSearcher> objects access the
content of an index.

IndexReader objects always represent a point-in-time view of an index as it
existed at the moment the reader was created.  If you want search results
to reflect modifications to an index, you must create a new IndexReader
after the update process completes.

IndexReaders are composites; most of the work is done by individual
L<DataReader|Lucy::Index::DataReader> sub-components, which may be
accessed via L<fetch()|/fetch> and L<obtain()|/obtain>.  The most efficient and powerful access
to index data happens at the segment level via
L<SegReader|Lucy::Index::SegReader>’s sub-components.

=head1 CONSTRUCTORS

=head2 open

    my $reader = Lucy::Index::IndexReader->open(
        index    => '/path/to/index', # required
        snapshot => $snapshot,
        manager  => $index_manager,
    );

IndexReader is an abstract base class; open() returns the IndexReader
subclass PolyReader, which channels the output of 0 or more SegReaders.

=over

=item *

B<index> - Either a string filepath or a Folder.

=item *

B<snapshot> - A Snapshot.  If not supplied, the most recent snapshot
file will be used.

=item *

B<manager> - An L<IndexManager|Lucy::Index::IndexManager>.
Read-locking is off by default; supplying this argument turns it on.

=back

=head1 ABSTRACT METHODS

=head2 doc_max

    $index_reader->doc_max();

Return the maximum number of documents available to the reader, which
is also the highest possible internal document id.  Documents which
have been marked as deleted but not yet purged from the index are
included in this count.

=head2 doc_count

    $index_reader->doc_count();

Return the number of documents available to the reader, subtracting
any that are marked as deleted.

=head2 del_count

    $index_reader->del_count();

Return the number of documents which have been marked as deleted but
not yet purged from the index.

=head2 offsets

    $index_reader->offsets();

Return an array with one entry for each segment, corresponding to
segment doc_id start offset.

=head2 seg_readers

    $index_reader->seg_readers();

Return an array of all the SegReaders represented within the
IndexReader.

=head1 METHODS

=head2 obtain

    $index_reader->obtain($api);

Fetch a component, or throw an error if the component can’t be found.

=over

=item *

B<api> - The name of the DataReader subclass that the desired
component must implement.

=back

=head2 fetch

    $index_reader->fetch($api);

Fetch a component, or return undef if the component can’t be
found.

=over

=item *

B<api> - The name of the DataReader subclass that the desired
component must implement.

=back

=head1 INHERITANCE

Lucy::Index::IndexReader isa L<Lucy::Index::DataReader> isa Clownfish::Obj.

=cut


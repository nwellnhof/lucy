# ***********************************************
# 
# !!!! DO NOT EDIT !!!!
# 
# This file was auto-generated by Build.PL.
# 
# ***********************************************
# 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=encoding utf8

=head1 NAME

Lucy::Search::TermQuery - Query which matches individual terms.

=head1 SYNOPSIS

    my $term_query = Lucy::Search::TermQuery->new(
        field => 'content',
        term  => 'foo', 
    );
    my $hits = $searcher->hits( query => $term_query );

=head1 DESCRIPTION

TermQuery is a subclass of L<Query|Lucy::Search::Query> for matching
individual terms in a specific field.

=head1 CONSTRUCTORS

=head2 new

    my $term_query = Lucy::Search::TermQuery->new(
        field => 'content',    # required
        term  => 'foo',        # required
    );

Create a new TermQuery.

=over

=item *

B<field> - Field name.

=item *

B<term> - Term text.

=back

=head1 METHODS

=head2 get_field

    $term_query->get_field();

Accessor for object’s C<field> member.

=head2 get_term

    $term_query->get_term();

Accessor for object’s C<term> member.

=head2 make_compiler

    $term_query->make_compiler(
        searcher    => $searcher,  # required
        boost       => $float,     # required
        subordinate => $bool,      # default: false
    );

Abstract factory method returning a Compiler derived from this Query.

=over

=item *

B<searcher> - A Searcher.

=item *

B<boost> - A scoring multiplier.

=item *

B<subordinate> - Indicates whether the Query is a subquery (as
opposed to a top-level query).  If false, the implementation must
invoke L<normalize()|Lucy::Search::Compiler/normalize> on the newly minted Compiler object before returning
it.

=back

=head1 INHERITANCE

Lucy::Search::TermQuery isa L<Lucy::Search::Query> isa Clownfish::Obj.

=cut


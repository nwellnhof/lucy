# ***********************************************
# 
# !!!! DO NOT EDIT !!!!
# 
# This file was auto-generated by Build.PL.
# 
# ***********************************************
# 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=encoding utf8

=head1 NAME

Lucy::Search::NOTQuery - Invert the result set of another Query.

=head1 SYNOPSIS

    my $not_bar_query = Lucy::Search::NOTQuery->new( 
        negated_query => $bar_query,
    );
    my $foo_and_not_bar_query = Lucy::Search::ANDQuery->new(
        children => [ $foo_query, $not_bar_query ].
    );
    my $hits = $searcher->hits( query => $foo_and_not_bar_query );
    ...

=head1 DESCRIPTION

A NOTQuery wraps another L<Query|Lucy::Search::Query> and matches
against its inverse document set.  All matching docs recieve a score of
0.0.

NOTQuery is often used in conjunction with
L<ANDQuery|Lucy::Search::ANDQuery> to provide “a AND NOT b”
semantics.

=head1 CONSTRUCTORS

=head2 new

    my $not_query = Lucy::Search::NOTQuery->new( 
        negated_query => $query,
    );

Create a new NOTQuery.

=over

=item *

B<negated_query> - The Query whose result set should be inverted.

=back

=head1 METHODS

=head2 get_negated_query

    $not_query->get_negated_query();

Accessor for the object’s negated query.

=head2 set_negated_query

    $not_query->set_negated_query($negated_query);

Setter for the object’s negated query.

=head2 make_compiler

    $not_query->make_compiler(
        searcher    => $searcher,  # required
        boost       => $float,     # required
        subordinate => $bool,      # default: false
    );

Abstract factory method returning a Compiler derived from this Query.

=over

=item *

B<searcher> - A Searcher.

=item *

B<boost> - A scoring multiplier.

=item *

B<subordinate> - Indicates whether the Query is a subquery (as
opposed to a top-level query).  If false, the implementation must
invoke L<normalize()|Lucy::Search::Compiler/normalize> on the newly minted Compiler object before returning
it.

=back

=head1 INHERITANCE

Lucy::Search::NOTQuery isa L<Lucy::Search::PolyQuery> isa L<Lucy::Search::Query> isa Clownfish::Obj.

=cut


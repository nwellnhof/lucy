# ***********************************************
# 
# !!!! DO NOT EDIT !!!!
# 
# This file was auto-generated by Build.PL.
# 
# ***********************************************
# 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=encoding utf8

=head1 NAME

Lucy::Search::RangeQuery - Match a range of values.

=head1 SYNOPSIS

    # Match all articles by "Foo" published since the year 2000.
    my $range_query = Lucy::Search::RangeQuery->new(
        field         => 'publication_date',
        lower_term    => '2000-01-01',
        include_lower => 1,
    );
    my $author_query = Lucy::Search::TermQuery->new(
        field => 'author_last_name',
        text  => 'Foo',
    );
    my $and_query = Lucy::Search::ANDQuery->new(
        children => [ $range_query, $author_query ],
    );
    my $hits = $searcher->hits( query => $and_query );
    ...

=head1 DESCRIPTION

RangeQuery matches documents where the value for a particular field falls
within a given range.

=head1 CONSTRUCTORS

=head2 new

    my $range_query = Lucy::Search::RangeQuery->new(
        field         => 'product_number', # required
        lower_term    => '003',            # see below
        upper_term    => '060',            # see below
        include_lower => 0,                # default true
        include_upper => 0,                # default true
    );

Create a new RangeQuery.

Takes 5 parameters; C<field> is required, as is at least one of either
C<lower_term> or C<upper_term>.

=over

=item *

B<field> - The name of a C<sortable> field.

=item *

B<lower_term> - Lower delimiter.  If not supplied, all values
less than C<upper_term> will pass.

=item *

B<upper_term> - Upper delimiter.  If not supplied, all values greater
than C<lower_term> will pass.

=item *

B<include_lower> - Indicates whether docs which match
C<lower_term> should be included in the results.

=item *

B<include_upper> - Indicates whether docs which match
C<upper_term> should be included in the results.

=back

=head1 METHODS

=head2 make_compiler

    $range_query->make_compiler(
        searcher    => $searcher,  # required
        boost       => $float,     # required
        subordinate => $bool,      # default: false
    );

Abstract factory method returning a Compiler derived from this Query.

=over

=item *

B<searcher> - A Searcher.

=item *

B<boost> - A scoring multiplier.

=item *

B<subordinate> - Indicates whether the Query is a subquery (as
opposed to a top-level query).  If false, the implementation must
invoke L<normalize()|Lucy::Search::Compiler/normalize> on the newly minted Compiler object before returning
it.

=back

=head1 INHERITANCE

Lucy::Search::RangeQuery isa L<Lucy::Search::Query> isa Clownfish::Obj.

=cut


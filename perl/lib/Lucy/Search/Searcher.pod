# ***********************************************
# 
# !!!! DO NOT EDIT !!!!
# 
# This file was auto-generated by Build.PL.
# 
# ***********************************************
# 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=encoding utf8

=head1 NAME

Lucy::Search::Searcher - Base class for searching collections of documents.

=head1 SYNOPSIS

    # Abstract base class.

=head1 DESCRIPTION

Abstract base class for objects which search.  Core subclasses include
L<IndexSearcher|Lucy::Search::IndexSearcher> and
L<PolySearcher|Lucy::Search::PolySearcher>.

=head1 CONSTRUCTORS

=head2 new

    package MySearcher;
    use base qw( Lucy::Search::Searcher );
    sub new {
        my $self = shift->SUPER::new;
        ...
        return $self;
    }

Abstract constructor.

=over

=item *

B<schema> - A Schema.

=back

=head1 ABSTRACT METHODS

=head2 doc_max

    $searcher->doc_max();

Return the maximum number of docs in the collection represented by the
Searcher, which is also the highest possible internal doc id.
Documents which have been marked as deleted but not yet purged are
included in this count.

=head2 doc_freq

    $searcher->doc_freq(
        field => $string,  # required
        term  => $obj,     # required
    );

Return the number of documents which contain the term in the given
field.

=over

=item *

B<field> - Field name.

=item *

B<term> - The term to look up.

=back

=head2 collect

    $searcher->collect(
        query     => $query,      # required
        collector => $collector,  # required
    );

Iterate over hits, feeding them into a
L<Collector|Lucy::Search::Collector>.

=over

=item *

B<query> - A Query.

=item *

B<collector> - A Collector.

=back

=head2 fetch_doc

    $searcher->fetch_doc($doc_id);

Retrieve a document.  Throws an error if the doc id is out of range.

=over

=item *

B<doc_id> - A document id.

=back

=head1 METHODS

=head2 glean_query

    $searcher->glean_query($query);
    $searcher->glean_query();  # default: undef

If the supplied object is a Query, return it; if it’s a query string,
create a QueryParser and parse it to produce a query against all
indexed fields.

=head2 hits

    $searcher->hits(
        query      => $obj,        # required
        offset     => $int,        # default: 0
        num_wanted => $int,        # default: 10
        sort_spec  => $sort_spec,  # default: undef
    );

Return a Hits object containing the top results.

=over

=item *

B<query> - Either a Query object or a query string.

=item *

B<offset> - The number of most-relevant hits to discard, typically
used when “paging” through hits N at a time.  Setting
C<offset> to 20 and C<num_wanted> to 10 retrieves
hits 21-30, assuming that 30 hits can be found.

=item *

B<num_wanted> - The number of hits you would like to see after
C<offset> is taken into account.

=item *

B<sort_spec> - A L<SortSpec|Lucy::Search::SortSpec>, which will affect
how results are ranked and returned.

=back

=head2 get_schema

    $searcher->get_schema();

Accessor for the object’s C<schema> member.

=head1 INHERITANCE

Lucy::Search::Searcher isa Clownfish::Obj.

=cut


# ***********************************************
# 
# !!!! DO NOT EDIT !!!!
# 
# This file was auto-generated by Build.PL.
# 
# ***********************************************
# 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=encoding utf8

=head1 NAME

Lucy::Search::RequiredOptionalQuery - Join results for two Queries, one required, one optional.

=head1 SYNOPSIS

    my $foo_and_maybe_bar = Lucy::Search::RequiredOptionalQuery->new(
        required_query => $foo_query,
        optional_query => $bar_query,
    );
    my $hits = $searcher->hits( query => $foo_and_maybe_bar );
    ...

=head1 DESCRIPTION

RequiredOptionalQuery joins the result sets of one Query which MUST match,
and one Query which SHOULD match.  When only the required Query matches,
its score is passed along; when both match, the scores are summed.

=head1 CONSTRUCTORS

=head2 new

    my $reqopt_query = Lucy::Search::RequiredOptionalQuery->new(
        required_query => $foo_query,    # required
        optional_query => $bar_query,    # required
    );

=over

=item *

B<required_query> - Query must must match.

=item *

B<optional_query> - Query which should match.

=back

=head1 METHODS

=head2 get_required_query

    $required_optional_query->get_required_query();

Getter for the required Query.

=head2 set_required_query

    $required_optional_query->set_required_query($required_query);

Setter for the required Query.

=head2 get_optional_query

    $required_optional_query->get_optional_query();

Getter for the optional Query.

=head2 set_optional_query

    $required_optional_query->set_optional_query($optional_query);

Setter for the optional Query.

=head2 make_compiler

    $required_optional_query->make_compiler(
        searcher    => $searcher,  # required
        boost       => $float,     # required
        subordinate => $bool,      # default: false
    );

Abstract factory method returning a Compiler derived from this Query.

=over

=item *

B<searcher> - A Searcher.

=item *

B<boost> - A scoring multiplier.

=item *

B<subordinate> - Indicates whether the Query is a subquery (as
opposed to a top-level query).  If false, the implementation must
invoke L<normalize()|Lucy::Search::Compiler/normalize> on the newly minted Compiler object before returning
it.

=back

=head1 INHERITANCE

Lucy::Search::RequiredOptionalQuery isa L<Lucy::Search::PolyQuery> isa L<Lucy::Search::Query> isa Clownfish::Obj.

=cut


# ***********************************************
# 
# !!!! DO NOT EDIT !!!!
# 
# This file was auto-generated by Build.PL.
# 
# ***********************************************
# 
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

=encoding utf8

=head1 NAME

Lucy::Store::LockFactory - Create Locks.

=head1 SYNOPSIS

    use Sys::Hostname qw( hostname );
    my $hostname = hostname() or die "Can't get unique hostname";
    my $folder = Lucy::Store::FSFolder->new( 
        path => '/path/to/index', 
    );
    my $lock_factory = Lucy::Store::LockFactory->new(
        folder => $folder,
        host   => $hostname,
    );
    my $write_lock = $lock_factory->make_lock(
        name     => 'write',
        timeout  => 5000,
        interval => 100,
    );

=head1 DESCRIPTION

LockFactory is used to spin off interprocess mutex locks used by various
index reading and writing components.  The default implementation uses
lockfiles, but LockFactory subclasses which are implemented using
alternatives such as flock() are possible.

=head1 CONSTRUCTORS

=head2 new

    my $lock_factory = Lucy::Store::LockFactory->new(
        folder => $folder,      # required
        host   => $hostname,    # required
    );

Create a new LockFactory.

=over

=item *

B<folder> - A L<Folder|Lucy::Store::Folder>.

=item *

B<host> - An identifier which should be unique per-machine.

=back

=head1 METHODS

=head2 make_lock

    $lock_factory->make_lock(
        name     => $string,  # required
        timeout  => $int,     # default: 0
        interval => $int,     # default: 100
    );

Return a Lock object, which, once L<obtain()|Lucy::Store::Lock/obtain> returns successfully,
maintains an exclusive lock on a resource.

=over

=item *

B<name> - A file-system-friendly id which identifies the
resource to be locked.

=item *

B<timeout> - Time in milliseconds to keep retrying before abandoning
the attempt to L<obtain()|Lucy::Store::Lock/obtain> a lock.

=item *

B<interval> - Time in milliseconds between retries.

=back

=head2 make_shared_lock

    $lock_factory->make_shared_lock(
        name     => $string,  # required
        timeout  => $int,     # default: 0
        interval => $int,     # default: 100
    );

Return a Lock object for which L<shared()|Lucy::Store::Lock/shared> returns true, and which
maintains a non-exclusive lock on a resource once L<obtain()|Lucy::Store::Lock/obtain> returns
success.

=over

=item *

B<name> - A file-system-friendly id which identifies the
resource to be locked.

=item *

B<timeout> - Time in milliseconds to keep retrying before abandoning
the attempt to L<obtain()|Lucy::Store::Lock/obtain> a lock.

=item *

B<interval> - Time in milliseconds between retries.

=back

=head1 INHERITANCE

Lucy::Store::LockFactory isa Clownfish::Obj.

=cut

